/*
 * DomainObjectExplorer.java
 *
 * Created on 18 / august / 2006, 21:38
 * @author Jordi Marine Fort
 */
package org.doe4ejb3.gui;

import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.lang.annotation.Annotation;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Vector;

import javax.swing.*;
import javax.swing.event.InternalFrameAdapter;
import javax.swing.event.InternalFrameEvent;

import javax.persistence.EntityManager;
import javax.persistence.NamedQuery;
import javax.persistence.Query;

// import javax.jnlp.*;

import org.doe4ejb3.exception.ApplicationException;
import org.doe4ejb3.util.JPAUtils;
import org.doe4ejb3.util.EJBQLUtils;




public class DomainObjectExplorer extends javax.swing.JFrame 
{
    
    /**
     * Creates new form DomainObjectExplorer
     */
    // <editor-fold defaultstate="collapsed" desc=" Constructor ">
    protected DomainObjectExplorer() 
    {
        Exception error = null;
        initComponents();
        
        try {
            initPersistenceEntities();
            // TODO: create menu actions (e.g: "File-->New-->EntityXYZ")"
        } catch(Exception ex) {
            ex.printStackTrace();            
            error = ex;
        }
        
        // TODO: advice user when no persistence entities were found.
        if(jComboBoxEntityClass.getItemCount() == 0) error = new ApplicationException("No persistent entities found.");
        
        // replace JDesktopPane with a better  MDI container
        mdiDesktopPane = new MDIDesktopPane();
        jScrollDesktopPane.setViewportView(mdiDesktopPane);
        jSplitPaneCentral.setRightComponent(jScrollDesktopPane);
        jMainMenuBar.add(new WindowMenu(mdiDesktopPane), 2);
        
        setSize(800,560);
        
        if(error != null) {
           JOptionPane.showInternalMessageDialog(mdiDesktopPane, "Error: " + error.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    // </editor-fold> 
  
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPopupMenuContextual = new javax.swing.JPopupMenu();
        jMenuItemContextualNew = new javax.swing.JMenuItem();
        jMenuItemContextualEdit = new javax.swing.JMenuItem();
        jMenuItemContextualSeparator1 = new javax.swing.JSeparator();
        jMenuItemContextualDelete = new javax.swing.JMenuItem();
        jToolBar = new javax.swing.JToolBar();
        jButtonExit = new javax.swing.JButton();
        jStatusPanel = new javax.swing.JPanel();
        jLabelStatus = new javax.swing.JLabel();
        jSplitPaneCentral = new javax.swing.JSplitPane();
        jPanelEntidad = new javax.swing.JPanel();
        jLabelEntity = new javax.swing.JLabel();
        jComboBoxEntityClass = new javax.swing.JComboBox();
        jLabelQuery = new javax.swing.JLabel();
        jComboBoxNamedQuery = new javax.swing.JComboBox();
        jPanelQueryParams = new javax.swing.JPanel();
        jScrollPaneQueryResults = new javax.swing.JScrollPane();
        jListQueryResults = new javax.swing.JList();
        jButtonSearch = new javax.swing.JButton();
        jScrollDesktopPane = new javax.swing.JScrollPane();
        jMainMenuBar = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuNew = new javax.swing.JMenu();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenuEdit = new javax.swing.JMenu();
        jMenuHelp = new javax.swing.JMenu();
        jMenuItemAbout = new javax.swing.JMenuItem();

        jMenuItemContextualNew.setMnemonic('n');
        jMenuItemContextualNew.setText("New");
        jMenuItemContextualNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemContextualNewActionPerformed(evt);
            }
        });

        jPopupMenuContextual.add(jMenuItemContextualNew);

        jMenuItemContextualEdit.setMnemonic('e');
        jMenuItemContextualEdit.setText("Edit");
        jMenuItemContextualEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemContextualEditActionPerformed(evt);
            }
        });

        jPopupMenuContextual.add(jMenuItemContextualEdit);

        jPopupMenuContextual.add(jMenuItemContextualSeparator1);

        jMenuItemContextualDelete.setMnemonic('d');
        jMenuItemContextualDelete.setText("Delete");
        jMenuItemContextualDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemContextualDeleteActionPerformed(evt);
            }
        });

        jPopupMenuContextual.add(jMenuItemContextualDelete);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Domain Object Explorer for EJB3");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jButtonExit.setMnemonic('x');
        jButtonExit.setText("Exit");
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        jToolBar.add(jButtonExit);

        getContentPane().add(jToolBar, java.awt.BorderLayout.NORTH);

        jStatusPanel.setLayout(new java.awt.BorderLayout());

        jStatusPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jStatusPanel.add(jLabelStatus, java.awt.BorderLayout.CENTER);

        getContentPane().add(jStatusPanel, java.awt.BorderLayout.SOUTH);

        jSplitPaneCentral.setDividerLocation(300);
        jPanelEntidad.setMinimumSize(new java.awt.Dimension(300, 200));
        jLabelEntity.setText("Entity:");

        jComboBoxEntityClass.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxEntityClassItemStateChanged(evt);
            }
        });

        jLabelQuery.setText("Query:");

        jComboBoxNamedQuery.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All" }));
        jComboBoxNamedQuery.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxNamedQueryItemStateChanged(evt);
            }
        });

        jPanelQueryParams.setBorder(javax.swing.BorderFactory.createTitledBorder("Parameters:"));

        jScrollPaneQueryResults.setBorder(javax.swing.BorderFactory.createTitledBorder("Results:"));
        jScrollPaneQueryResults.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jListQueryResults.setComponentPopupMenu(jPopupMenuContextual);
        jScrollPaneQueryResults.setViewportView(jListQueryResults);

        jButtonSearch.setMnemonic('s');
        jButtonSearch.setText("Search");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanelEntidadLayout = new org.jdesktop.layout.GroupLayout(jPanelEntidad);
        jPanelEntidad.setLayout(jPanelEntidadLayout);
        jPanelEntidadLayout.setHorizontalGroup(
            jPanelEntidadLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelEntidadLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelEntidadLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPaneQueryResults, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanelEntidadLayout.createSequentialGroup()
                        .add(jPanelEntidadLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabelEntity)
                            .add(jLabelQuery))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanelEntidadLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jComboBoxEntityClass, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jComboBoxNamedQuery, 0, 120, Short.MAX_VALUE))
                        .add(15, 15, 15)
                        .add(jButtonSearch))
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanelQueryParams, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelEntidadLayout.setVerticalGroup(
            jPanelEntidadLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelEntidadLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelEntidadLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelEntity)
                    .add(jComboBoxEntityClass, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelEntidadLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelQuery)
                    .add(jComboBoxNamedQuery, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButtonSearch))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelQueryParams, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPaneQueryResults, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
                .addContainerGap())
        );
        jSplitPaneCentral.setLeftComponent(jPanelEntidad);

        jScrollDesktopPane.setMinimumSize(new java.awt.Dimension(400, 200));
        jScrollDesktopPane.setPreferredSize(new java.awt.Dimension(400, 200));
        jSplitPaneCentral.setRightComponent(jScrollDesktopPane);

        getContentPane().add(jSplitPaneCentral, java.awt.BorderLayout.CENTER);

        jMenuFile.setMnemonic('f');
        jMenuFile.setText("File");
        jMenuNew.setMnemonic('n');
        jMenuNew.setText("New");
        jMenuFile.add(jMenuNew);

        jMenuFile.add(jSeparator1);

        jMenuItemExit.setMnemonic('x');
        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });

        jMenuFile.add(jMenuItemExit);

        jMainMenuBar.add(jMenuFile);

        jMenuEdit.setMnemonic('e');
        jMenuEdit.setText("Edit");
        jMainMenuBar.add(jMenuEdit);

        jMenuHelp.setMnemonic('h');
        jMenuHelp.setText("Help");
        jMenuItemAbout.setMnemonic('a');
        jMenuItemAbout.setText("About");
        jMenuItemAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAboutActionPerformed(evt);
            }
        });

        jMenuHelp.add(jMenuItemAbout);

        jMainMenuBar.add(jMenuHelp);

        setJMenuBar(jMainMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxNamedQueryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxNamedQueryItemStateChanged
        ListItem selectedEntityClassItem = (ListItem)jComboBoxEntityClass.getSelectedItem();
        Class entityClass = (Class)selectedEntityClassItem.getValue();
        String persistenceUnitName = JPAUtils.getPersistentUnitNameForEntity(entityClass);

        showStatus("Searching parameter types...");
        if(jComboBoxNamedQuery.getSelectedIndex() <= 0) {
            jPanelQueryParams.removeAll();
            jPanelQueryParams.setVisible(false);
        } else  {
            ListItem listItem = (ListItem)jComboBoxNamedQuery.getSelectedItem();
            NamedQuery namedQuery = (NamedQuery)listItem.getValue();
            String ejbql = namedQuery.query();
            
            try {
                jPanelQueryParams.removeAll();
                
                HashMap ejbqlParameterTypes = EJBQLUtils.parseEJBQLParameterTypes(persistenceUnitName, ejbql);
                // TODO: create controls for query parameters (depending on its type)

                if(ejbqlParameterTypes.size() == 0) {
                    jPanelQueryParams.removeAll();
                    jPanelQueryParams.setVisible(false);
                } else {
                    queryParametersPanel = new QueryParametersEditorImpl(ejbqlParameterTypes);
                    jPanelQueryParams.setLayout(new java.awt.BorderLayout());
                    jPanelQueryParams.add(queryParametersPanel, java.awt.BorderLayout.CENTER);
                    jPanelQueryParams.setVisible(true);
                }
                
            } catch(Exception ex) {
                jPanelQueryParams.removeAll();
                jPanelQueryParams.setLayout(new FlowLayout());
                jPanelQueryParams.add(new JLabel("Unknown parameter types"));
                jPanelQueryParams.setVisible(true);
            }
            
        }
        showStatus("done.");
    }//GEN-LAST:event_jComboBoxNamedQueryItemStateChanged


    // <editor-fold defaultstate="collapsed" desc=" Window events ">
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
    }//GEN-LAST:event_formWindowOpened

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        exit(); 
    }//GEN-LAST:event_formWindowClosing

    // </editor-fold>

    
    // <editor-fold defaultstate="collapsed" desc=" Main menu events ">
    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        exit();
    }//GEN-LAST:event_jMenuItemExitActionPerformed


    private void jMenuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAboutActionPerformed
        JOptionPane.showInternalMessageDialog(mdiDesktopPane, "Domain Object Explorer for EJB3 - version 0.1\nDevelopers: Jordi Marine Fort <jmarine@tinet.org>", "About", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItemAboutActionPerformed

    private void jMenuItemNewActionPerformed(java.awt.event.ActionEvent evt) {                                                       

        try {
            showStatus("");

            JMenuItem invoker = (javax.swing.JMenuItem)evt.getSource();
            Class entityClass = (Class)invoker.getClientProperty("org.doe4ejb3.entityClass");

            if(entityClass != null) {
                showInternalFrame(entityClass, null);
            }
            
        } catch(ApplicationException ex) {

            JOptionPane.showInternalMessageDialog(mdiDesktopPane, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);

        } catch(Exception ex) {

            JOptionPane.showInternalMessageDialog(mdiDesktopPane, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
            
        }
    }                                                      

    // </editor-fold>
 
    
    // <editor-fold defaultstate="collapsed" desc=" Contextual menu events ">
    private void jMenuItemContextualNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemContextualNewActionPerformed

        try {
            showStatus("");

            Object invoker = ((javax.swing.JPopupMenu)((javax.swing.JMenuItem)evt.getSource()).getParent()).getInvoker();
            JComponent sourceControl = (JComponent)invoker;
            Class entityClass = (Class)sourceControl.getClientProperty("org.doe4ejb3.entityClass");
            
            if(sourceControl instanceof JList) {
                // Nueva entidad:
                showInternalFrame(entityClass, null);
            } 
            
        } catch(ApplicationException ex) {

            JOptionPane.showInternalMessageDialog(mdiDesktopPane, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);

        } catch(Exception ex) {

            JOptionPane.showInternalMessageDialog(mdiDesktopPane, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
            
        }
        
    }//GEN-LAST:event_jMenuItemContextualNewActionPerformed

    
    private void jMenuItemContextualEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemContextualEditActionPerformed
        try {
            showStatus("");
            
            Object invoker = ((javax.swing.JPopupMenu)((javax.swing.JMenuItem)evt.getSource()).getParent()).getInvoker();
            JComponent sourceControl = (JComponent)invoker;
            Class entityClass = (Class)sourceControl.getClientProperty("org.doe4ejb3.entityClass");
            
            if(sourceControl instanceof JList) {
                // Editar entidad:
                Object entity = ((JList)sourceControl).getSelectedValue();
                
                if(entity == null) {
                    throw new ApplicationException("No se ha seleccionado ningun valor.");
                } else {
                    showInternalFrame(entityClass, entity);
                }
            } 
            
        } catch(ApplicationException ex) {

            JOptionPane.showInternalMessageDialog(mdiDesktopPane, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);

        } catch(Exception ex) {

            JOptionPane.showInternalMessageDialog(mdiDesktopPane, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
            
        }
    }//GEN-LAST:event_jMenuItemContextualEditActionPerformed

    private void jMenuItemContextualDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemContextualDeleteActionPerformed

        try {
            showStatus("");
            
            Object invoker = ((javax.swing.JPopupMenu)((javax.swing.JMenuItem)evt.getSource()).getParent()).getInvoker();
            JComponent sourceControl = (JComponent)invoker;
            Class entityClass = (Class)sourceControl.getClientProperty("org.doe4ejb3.entityClass");
            
            // TODO? generalize for other component types (i.e. JTree, ComboBox, ...)
            if(sourceControl instanceof JList) {
                JList jList = (JList)sourceControl;
                Object entity = jList.getSelectedValue();
                if(entity == null) {
                    throw new ApplicationException("No se ha seleccionado ningun valor.");
                } else {
                    int confirm = JOptionPane.showInternalConfirmDialog(mdiDesktopPane, "¿Seguro que desea eliminar " + entity.toString() + "?", "Confirme operacion", JOptionPane.OK_CANCEL_OPTION);
                    if(confirm == JOptionPane.OK_OPTION) {
                        JPAUtils.removeEntity(entity);
                        
                        DefaultListModel model = (DefaultListModel)jList.getModel();
                        model.removeElementAt(jList.getSelectedIndex());
                        
                        showStatus("Selected item has been deleted.");
                    }
                }
            }
            
            
        } catch(ApplicationException ex) {

            JOptionPane.showInternalMessageDialog(mdiDesktopPane, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);

        } catch(Exception ex) {

            JOptionPane.showInternalMessageDialog(mdiDesktopPane, "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }

        
        
    }//GEN-LAST:event_jMenuItemContextualDeleteActionPerformed

    // </editor-fold>

    
    // <editor-fold defaultstate="collapsed" desc=" ToolBar events ">
    
    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        exit();
    }//GEN-LAST:event_jButtonExitActionPerformed

    // </editor-fold>

    
    // <editor-fold defaultstate="collapsed" desc=" Other application events ">
    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
      try {
        List entities = null;
        ListItem selectedListItem = (ListItem)jComboBoxEntityClass.getSelectedItem();
        Class entityClass = (Class)selectedListItem.getValue();

        showStatus("Searching...");
        if(jComboBoxNamedQuery.getSelectedIndex() == 0) {   // ALL
            entities = JPAUtils.findAllEntities(entityClass);
            
        } else if(jComboBoxNamedQuery.getSelectedIndex() > 0) {
            ListItem listItem = (ListItem)jComboBoxNamedQuery.getSelectedItem();
            NamedQuery namedQuery = (NamedQuery)listItem.getValue();
            HashMap parameterValues = queryParametersPanel.getParameterValues();
            entities = JPAUtils.executeNamedQuery(entityClass, namedQuery.name(), parameterValues);
        }

        DefaultListModel model = new DefaultListModel();
        if(entities.size() > 0) {
            for(Object obj : entities) model.addElement(obj);
        }

        jListQueryResults.setModel(model);

        showStatus(MessageFormat.format("Search done: {0} entities found", entities.size()));

     } catch(Exception ex) {
        showStatus("Error: " + ex.getMessage());
     }

        
    }//GEN-LAST:event_jButtonSearchActionPerformed



    private void jComboBoxEntityClassItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxEntityClassItemStateChanged
        ListItem selectedListItem = (ListItem)jComboBoxEntityClass.getSelectedItem();
        Class entityClass = (Class)selectedListItem.getValue();

        jListQueryResults.setModel(new DefaultListModel());
        jListQueryResults.putClientProperty("org.doe4ejb3.entityClass", entityClass);        

        jComboBoxNamedQuery.removeAllItems();
        jComboBoxNamedQuery.addItem("All");
        
        if(entityClass.getAnnotations() != null) {
            for(Annotation annotation : entityClass.getAnnotations()) {
                if(annotation instanceof NamedQuery) {
                    NamedQuery namedQuery = (NamedQuery)annotation;
                    String ejbql = namedQuery.query();
                    if( (ejbql != null) && (ejbql.toUpperCase().startsWith("SELECT")) ) {
                        ListItem item = new ListItem(namedQuery, namedQuery.name());
                        jComboBoxNamedQuery.addItem(item);
                    }
                }
            }
        }

        jPanelQueryParams.setVisible(false);
    }//GEN-LAST:event_jComboBoxEntityClassItemStateChanged

    // </editor-fold>

   
    // <editor-fold defaultstate="collapsed" desc=" Public methods ">
    
    public static final void main(String args[]) throws Exception
    {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                getInstance().setVisible(true);
            }
        });
    
    }
    
    public static final DomainObjectExplorer getInstance()
    {
        if(DOE == null) {
            DOE = new DomainObjectExplorer();
        }
        return DOE;
    }


    public JDesktopPane getDesktopPane()
    {
        return this.mdiDesktopPane;
    }
    

    public void showStatus(String msg)
    {
        if(msg == null) msg = "";
        this.jLabelStatus.setText(" " + msg);
    }

    public void exit()
    {
        this.setVisible(false);
        this.dispose();
        
        System.exit(0);
    }


    public void addEntityClass(Class entityClass)
    {
        String entityName = I18n.getEntityName(entityClass);
        String puName = JPAUtils.getPersistentUnitNameForEntity(entityClass);
        
        ListItem item = new ListItem(entityClass, puName + "/" + entityName);
        jComboBoxEntityClass.addItem(item);
                
        JMenuItem menuItem = new JMenuItem(entityName);
        menuItem.putClientProperty("org.doe4ejb3.entityClass", entityClass);
        menuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                jMenuItemNewActionPerformed(evt);
            }
        });

        newMenuItemsForEntityClasses.put(entityClass, menuItem);
        jMenuNew.add(menuItem);
                
        System.out.println("DomainObjectExplorer: added managed entity class: " +  entityClass.getName());
    }
    
    public void removeEntityClass(Class entityClass)
    {
        String entityName = I18n.getEntityName(entityClass);
        ListItem item = new ListItem(entityClass, entityName);
        jComboBoxEntityClass.removeItem(item);
        
        JMenuItem menuItem = newMenuItemsForEntityClasses.get(entityClass);
        if(menuItem != null) {
            jMenuNew.remove(menuItem);
        }

        System.out.println("DomainObjectExplorer: removed managed entity class: " +  entityClass.getName());
    }

/*    
    public byte[] openFileDialogFromJwsApp(String extensionFilters[]) throws Exception
    {
        BufferedInputStream bis = null;
        try {
            FileOpenService fos = (FileOpenService)ServiceManager.lookup("javax.jnlp.FileOpenService");
            FileContents fileContents = fos.openFileDialog(null, extensionFilters);
            byte data[] = new byte[(int)fileContents.getLength()];
            bis = new BufferedInputStream(fileContents.getInputStream());
            int len = bis.read(data, 0, data.length);
            if(len < data.length) throw new Exception("Cannot get all content in 1 read.");
            return data;
           
        } finally {
            if(bis != null) {
                try { bis.close(); bis = null; }
                catch(Exception ex) { }
            }
        }
    }
    
    
    public ImageIcon createImageIcon(byte imageRawData[]) throws Exception
    {
        Image img = this.getToolkit().createImage(imageRawData);
        return new ImageIcon(img);
    }
 */



    // </editor-fold>
    
    
    // <editor-fold defaultstate="collapsed" desc=" Private/protected methods ">
    protected void initPersistenceEntities() throws Exception
    {
        System.out.println("EntityContainer: initPersistentEntities...");
        Collection<Class> entityClasses =  org.doe4ejb3.util.JPAUtils.getPersistentEntities();
        for(Class entityClass : entityClasses) 
        {
            addEntityClass(entityClass);
        }

    }
    
    private void showInternalFrame(Class entityClass, Object entity) throws Exception
    {
        final Object key = (entity != null) ? entity : entityClass;
        JInternalFrame oldFrame = openedInternalFrames.get(key);
        if(oldFrame != null) {

            if(oldFrame.isIcon()) oldFrame.setIcon(false);
            oldFrame.setSelected(true);
            
        } else {
            
            JInternalFrame iFrame = createInternalFrame(entityClass, entity);
            iFrame.addInternalFrameListener(new InternalFrameAdapter() {
                public void internalFrameClosed(InternalFrameEvent evt) {
                    openedInternalFrames.remove(key);
                }
              });


            openedInternalFrames.put(key, iFrame);
            mdiDesktopPane.add(iFrame);
            iFrame.setVisible(true);
            iFrame.setSelected(true);

        }
    }


    private JInternalFrame createInternalFrame(final Class entityClass, Object entity) throws Exception 
    {

        // TODO: encapsulate as "EntityInternalFrame":

        String title = org.doe4ejb3.gui.I18n.getEntityName(entityClass);
        if(entity == null) title = org.doe4ejb3.gui.I18n.getLiteral("New") + " " + title.toLowerCase();
        else title = org.doe4ejb3.gui.I18n.getLiteral("Edit") + " " + title + ": " + entity.toString();
        
        System.out.println("Creating internal frame");
        final JInternalFrame iFrame = new JInternalFrame(title, true, true, true, false );
        
        System.out.println("Preparing editor ");
        final EntityEditorInterface editor = EditorFactory.getEntityEditor(entityClass);
        if(entity == null) editor.newEntity(entityClass);
        else editor.setEntity(entity);
        
        System.out.println("Preparing buttons...");
        JButton btnAccept = new JButton("Accept");
        btnAccept.setMnemonic('a');
        btnAccept.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                Object modifiedEntity = null;
                try {
                    modifiedEntity = editor.getEntity();
                    JPAUtils.saveEntity(modifiedEntity);
                    showStatus(MessageFormat.format("{0} saved.", JPAUtils.getEntityName(entityClass)));
                    iFrame.dispose();
                } catch(Exception ex) {
                    showStatus(MessageFormat.format("Error saving {0}: {1}", JPAUtils.getEntityName(entityClass), ex.getMessage()));
                    ex.printStackTrace();
                }
            }
        });
        
        JButton btnClose = new JButton("Close");
        btnClose.setMnemonic('c');
        btnClose.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                iFrame.dispose();
            }
        });

        JPanel buttons = new JPanel();
        buttons.add(btnAccept);
        buttons.add(btnClose);

        
        JScrollPane scrollPaneForEditor = new JAutoScrollPaneOnComponentFocus((java.awt.Container)editor, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        iFrame.getContentPane().setLayout(new BorderLayout());
        iFrame.getContentPane().add(scrollPaneForEditor, BorderLayout.CENTER);
        iFrame.getContentPane().add(buttons, BorderLayout.SOUTH);

        // iFrame.setMinimumSize(new Dimension(400, 300));
        iFrame.pack();

        return iFrame;
    }
    
 
    // </editor-fold>

    
    // <editor-fold defaultstate="collapsed" desc=" Attributes ">
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JComboBox jComboBoxEntityClass;
    private javax.swing.JComboBox jComboBoxNamedQuery;
    private javax.swing.JLabel jLabelEntity;
    private javax.swing.JLabel jLabelQuery;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JList jListQueryResults;
    private javax.swing.JMenuBar jMainMenuBar;
    private javax.swing.JMenu jMenuEdit;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JMenuItem jMenuItemAbout;
    private javax.swing.JMenuItem jMenuItemContextualDelete;
    private javax.swing.JMenuItem jMenuItemContextualEdit;
    private javax.swing.JMenuItem jMenuItemContextualNew;
    private javax.swing.JSeparator jMenuItemContextualSeparator1;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenu jMenuNew;
    private javax.swing.JPanel jPanelEntidad;
    private javax.swing.JPanel jPanelQueryParams;
    private javax.swing.JPopupMenu jPopupMenuContextual;
    private javax.swing.JScrollPane jScrollDesktopPane;
    private javax.swing.JScrollPane jScrollPaneQueryResults;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSplitPane jSplitPaneCentral;
    private javax.swing.JPanel jStatusPanel;
    private javax.swing.JToolBar jToolBar;
    // End of variables declaration//GEN-END:variables

    /** Other UI components */
    private static DomainObjectExplorer DOE = null;
    private MDIDesktopPane mdiDesktopPane = null;
    private QueryParametersEditorImpl queryParametersPanel = null;

    /** Caches */ 
    private HashMap<Object,JInternalFrame> openedInternalFrames = new HashMap<Object,JInternalFrame>();
    private HashMap<Class,JMenuItem> newMenuItemsForEntityClasses = new HashMap<Class,JMenuItem>();

    // </editor-fold>
}

