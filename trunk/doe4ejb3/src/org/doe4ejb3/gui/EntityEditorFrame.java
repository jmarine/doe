/**
 * EntityEditorFrame.java
 *
 * Created on July 5, 2007, 1:02 PM
 * @author Jordi Marine Fort
 */

package org.doe4ejb3.gui;

import java.awt.*;
import java.awt.event.*;
import java.awt.datatransfer.*;
import java.awt.print.*;
import java.text.*;

import javax.swing.*;
import javax.swing.event.EventListenerList;

import org.doe4ejb3.event.*;
import org.doe4ejb3.util.*;


public class EntityEditorFrame extends javax.swing.JInternalFrame 
{

    private Object entity = null;
    private Class  entityClass = null;
    private EntityEditorInterface editor = null;
    
    /** Creates new form EntityEditorFrame */
    public EntityEditorFrame(Class entityClass, Object entity) throws Exception {
        
        initComponents();
        
        this.entityClass = entityClass;
        this.entity = entity;
        DomainObjectExplorer.getInstance().showStatus("");
        String title = org.doe4ejb3.gui.I18n.getEntityName(entityClass);
        if(entity == null) title = org.doe4ejb3.gui.I18n.getLiteral("New") + " " + title.toLowerCase();
        else title = org.doe4ejb3.gui.I18n.getLiteral("Edit") + " " + title + ": " + entity.toString();
        setTitle(title);
        
        System.out.println("Creating internal frame");
        
        setFrameIcon(EntityClassListCellRenderer.getInstance().getEntityIcon(entityClass));
        putClientProperty("entityListeners", new EventListenerList());
        
        System.out.println("Preparing editor ");
        editor = EditorFactory.getEntityEditor(entityClass);
        if(entity == null) {
            editor.newEntity(entityClass);
            jButtonDelete.setVisible(false);
            jButtonPrint.setVisible(false);
        } else {
            editor.setEntity(entity);
            jButtonDelete.setVisible(true);
            jButtonPrint.setVisible(true);
            ActionMap actionMap = application.ApplicationContext.getInstance().getActionMap(entityClass, editor.getEntity());
            if( (actionMap != null) && (actionMap.keys() != null) ) {
                for(Object action : actionMap.keys()) {
                    System.out.println("Action found: " + action);
                    JButton btnAction = new JButton(actionMap.get(action));
                    jButtonsPanel.add(btnAction, 3);
                }
            }
        }

        JScrollPane scrollPaneForEditor = new JAutoScrollPaneOnComponentFocus((java.awt.Container)editor, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        this.getContentPane().add(scrollPaneForEditor, BorderLayout.CENTER);
        this.pack();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane = new javax.swing.JScrollPane();
        jButtonsPanel = new JPanel() {
            public Insets getInsets() {
                return new Insets(0,7,7,7);
            }
        };
        jButtonSave = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonPrint = new javax.swing.JButton();
        jButtonClose = new javax.swing.JButton();

        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle(application.ApplicationContext.getInstance().getResourceMap(org.doe4ejb3.gui.EntityEditorFrame.class).getString("title")); // NOI18N

        jScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        getContentPane().add(jScrollPane, java.awt.BorderLayout.CENTER);

        jButtonsPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jButtonSave.setAction(application.ApplicationContext.getInstance().getActionMap(EntityEditorFrame.class, this).get("save"));
        jButtonSave.setMnemonic('s');
        jButtonsPanel.add(jButtonSave);

        jButtonDelete.setAction(application.ApplicationContext.getInstance().getActionMap(EntityEditorFrame.class, this).get("delete"));
        jButtonDelete.setMnemonic('d');
        jButtonsPanel.add(jButtonDelete);

        jButtonPrint.setAction(application.ApplicationContext.getInstance().getActionMap(EntityEditorFrame.class, this).get("print"));
        jButtonPrint.setMnemonic('p');
        jButtonsPanel.add(jButtonPrint);

        jButtonClose.setAction(application.ApplicationContext.getInstance().getActionMap(EntityEditorFrame.class, this).get("close"));
        jButtonClose.setMnemonic('c');
        jButtonsPanel.add(jButtonClose);

        getContentPane().add(jButtonsPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    @application.Action
    public application.Task save() 
    {
        return new application.Task<Void, Void>()
        {
            @Override 
            protected Void doInBackground() 
            {
                try {
                    EntityEditorFrame.this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    setMessage(MessageFormat.format("Saving {0}.", JPAUtils.getEntityName(entityClass)));                    
                    Object oldEntity = editor.getEntity();
                    Object newEntity = JPAUtils.saveEntity(DomainObjectExplorer.getInstance().getConnectionParams(), oldEntity);
                    setMessage(MessageFormat.format("{0} saved.", JPAUtils.getEntityName(entityClass)));
                    
                    EntityEvent entityEvent = new EntityEvent(this, editor.isNew()? EntityEvent.ENTITY_INSERT : EntityEvent.ENTITY_UPDATE, oldEntity, newEntity);
                    EventListenerList listenerList = (EventListenerList)EntityEditorFrame.this.getClientProperty("entityListeners");
                    Object[] listeners = listenerList.getListenerList();
                    for (int i = listeners.length-2; i>=0; i-=2) {
                        if (listeners[i]==EntityListener.class) {
                            System.out.println("EditorFactory: notification of tableChanged to: " + listeners[i+1]);
                            ((EntityListener)listeners[i+1]).entityChanged(entityEvent);
                        }
                    }
                    
                    EntityEditorFrame.this.dispose();
                } catch(Exception ex) {
                    setMessage(MessageFormat.format("Error saving {0}: {1}", JPAUtils.getEntityName(entityClass), ex.getMessage()));
                    ex.printStackTrace();
                } finally {
                    EntityEditorFrame.this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                }
                return null;
            }
        };
    }

    @application.Action
    public application.Task delete() 
    {
        int confirm = JOptionPane.showInternalConfirmDialog(DomainObjectExplorer.getInstance().getDesktopPane(), "Do you really want to delete this object?", "Confirm operation", JOptionPane.OK_CANCEL_OPTION);
        if(confirm != JOptionPane.OK_OPTION) {                
            
            return null;
            
        } else {
            // Create deletion task:
            return new application.Task<Void, Void>()
            {
                @Override 
                protected Void doInBackground() 
                {        
                    try {
                        EntityEditorFrame.this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                        setMessage(MessageFormat.format("Deleting {0}.", JPAUtils.getEntityName(entityClass)));                    
                        Object entity = editor.getEntity();
                        JPAUtils.removeEntity(DomainObjectExplorer.getInstance().getConnectionParams(), entity);
                        setMessage(MessageFormat.format("{0} removed.", JPAUtils.getEntityName(entityClass)));

                        EntityEvent entityEvent = new EntityEvent(this, EntityEvent.ENTITY_DELETE, entity, null);
                        EventListenerList listenerList = (EventListenerList)EntityEditorFrame.this.getClientProperty("entityListeners");
                        Object[] listeners = listenerList.getListenerList();
                        for (int i = listeners.length-2; i>=0; i-=2) {
                            if (listeners[i]==EntityListener.class) {
                                System.out.println("EditorFactory: notification of tableChanged to: " + listeners[i+1]);
                                ((EntityListener)listeners[i+1]).entityChanged(entityEvent);
                            }
                        }

                        EntityEditorFrame.this.dispose();
                    } catch(Exception ex) {
                        setMessage(MessageFormat.format("Error deleting {0}: {1}", JPAUtils.getEntityName(entityClass), ex.getMessage()));
                        ex.printStackTrace();
                    } finally {
                        EntityEditorFrame.this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                    }

                    return null;
                }
            };
        }
                
    }

    @application.Action
    public application.Task print() {
        return new application.Task<Void, Void>()
        {
            @Override 
            protected Void doInBackground() 
            {        
                setMessage(MessageFormat.format("Printing {0}.", JPAUtils.getEntityName(entityClass)));                    
                if(editor instanceof Printable) {
                    PrinterJob printJob = PrinterJob.getPrinterJob();
                    printJob.setPrintable((Printable)editor);
                    if (printJob.printDialog()) {
                        try {
                            printJob.print();
                        } catch(PrinterException pe) {
                            System.out.println("Error printing: " + pe);
                        }                    
                    }
                } else {
                    PrintUtils.printComponent((Component)editor);
                }
                return null;
            }
        };
    }

    @application.Action
    public void close() {
        this.dispose();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonPrint;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JPanel jButtonsPanel;
    private javax.swing.JScrollPane jScrollPane;
    // End of variables declaration//GEN-END:variables
    
}
