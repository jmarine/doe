/*
 * ImagePropertyEditor.java
 *
 * Created on July 14, 2007, 8:59 PM
 * @author Jordi Marine Fort
 */

package org.doe4ejb3.gui;

import java.awt.Dimension;
import java.awt.Image;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;

import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JFileChooser;


public class ImagePropertyEditor extends javax.swing.JPanel implements org.doe4ejb3.gui.PropertyEditorInterface
{
    private byte imageRawData[] = null;
    
    /** Creates new form ImagePropertyEditor */
    public ImagePropertyEditor() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser = new javax.swing.JFileChooser();
        jScrollPane = new javax.swing.JScrollPane();
        jLabelIcon = new javax.swing.JLabel();
        jPanelButtons = new javax.swing.JPanel();
        jButtonLoad = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jButtonClear = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jScrollPane.setPreferredSize(new java.awt.Dimension(300, 175));

        jLabelIcon.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelIcon.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        jScrollPane.setViewportView(jLabelIcon);

        add(jScrollPane, java.awt.BorderLayout.CENTER);

        jPanelButtons.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        jButtonLoad.setAction(org.jdesktop.application.Application.getInstance(org.doe4ejb3.gui.Application.class).getContext().getActionMap(ImagePropertyEditor.class, this).get("load"));
        jButtonLoad.setMnemonic('l');
        jPanelButtons.add(jButtonLoad);

        jButtonSave.setAction(org.jdesktop.application.Application.getInstance(org.doe4ejb3.gui.Application.class).getContext().getActionMap(ImagePropertyEditor.class, this).get("save"));
        jButtonSave.setMnemonic('s');
        jPanelButtons.add(jButtonSave);

        jButtonClear.setAction(org.jdesktop.application.Application.getInstance(org.doe4ejb3.gui.Application.class).getContext().getActionMap(ImagePropertyEditor.class, this).get("delete"));
        jButtonClear.setMnemonic('c');
        jPanelButtons.add(jButtonClear);

        add(jPanelButtons, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    
    public void setValue(Object value) throws Exception
    {
        byte oldImageRawData[] = imageRawData;
        if(value != oldImageRawData) {
            if(value != null) {
                byte tmpData[] = (byte[])value;
                jLabelIcon.setIcon(createImageIcon(tmpData));
                imageRawData = tmpData;
                jButtonSave.setEnabled(true);
                jButtonClear.setEnabled(true);
            } else {
                imageRawData = null;
                jLabelIcon.setIcon(null);
                jButtonSave.setEnabled(false);
                jButtonClear.setEnabled(false);
            }
            firePropertyChange("value", oldImageRawData, imageRawData);
        }
    }

    public Object getValue() {
        return imageRawData;
    }
    

    public JComponent getJComponent() {
        return this;
    }

    public void setDimension(Dimension dim) {
        if(dim.width != 0 && dim.height != 0) {
            this.remove(jScrollPane);
            this.add(jScrollPane, java.awt.BorderLayout.WEST);
            jScrollPane.setPreferredSize(dim);
        }
    }
    
    private ImageIcon createImageIcon(byte imageRawData[]) throws Exception
    {
        Image img = this.getToolkit().createImage(imageRawData);
        return new ImageIcon(img);
    }


    public boolean isImageAvailable() 
    {
        return imageRawData != null;
    }    

    
    @org.jdesktop.application.Action
    public org.jdesktop.application.Task load()
    {
        int ret = jFileChooser.showOpenDialog(this);
        if (ret == JFileChooser.APPROVE_OPTION) {
            return new LoadImageTask(Application.getApplication(), jFileChooser.getSelectedFile());
        } else {
            return null;
        }
    }
    
    
    @org.jdesktop.application.Action(enabledProperty="ImageAvailable")
    public org.jdesktop.application.Task save() 
    {
        int ret = jFileChooser.showSaveDialog(this);
        if (ret == JFileChooser.APPROVE_OPTION) {
            return new SaveImageTask(Application.getApplication(), jFileChooser.getSelectedFile());
        } else {
            return null;
        }
    }
    
    
    @org.jdesktop.application.Action(enabledProperty="ImageAvailable")
    public void delete() 
    {
        try {
            setValue(null);
        } catch(Exception ex) { }
    }

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonLoad;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JLabel jLabelIcon;
    private javax.swing.JPanel jPanelButtons;
    private javax.swing.JScrollPane jScrollPane;
    // End of variables declaration//GEN-END:variables

    

    class LoadImageTask extends org.jdesktop.application.Task<byte[],Void>
    {
        private File file;
        
        public LoadImageTask(Application app, File file)
        {
            super(app);
            this.file = file;
        }
        
        @Override 
        protected byte[] doInBackground() throws Exception
        {
            byte data[] = null;
            BufferedInputStream bis = null;
            try {
                bis = new BufferedInputStream(new FileInputStream(file));

                byte buffer[] = new byte[(int)file.length()];
                int len = bis.read(buffer, 0, buffer.length);
                if(len < file.length()) throw new Exception("Error loading image.");

                data = buffer;

            } finally {
                if(bis != null) {
                    try { bis.close(); bis = null; }
                    catch(Exception ex) { }
                }
            }
            return data;
        }

        @Override
        protected void cancelled() 
        {
            setMessage("Image loading cancelled.");
        }                  

        @Override
        protected void succeeded(byte[] result)
        {
            try {
                setValue(result);
                setMessage("Image loaded: " + result.length + " bytes");
            } catch(Exception ex) {
                failed(ex);
            }
        }

        @Override
        protected void interrupted(InterruptedException ex) 
        {
            setMessage("Image loading interrupted: " + ex.getMessage());
            ex.printStackTrace();
        }

        @Override
        protected void failed(Throwable cause) 
        {
            setMessage("Error: " + cause.getMessage());
        }
    }

    
    class SaveImageTask extends org.jdesktop.application.Task<Boolean,Void>
    {
        private File file;
        
        public SaveImageTask(Application app, File file)
        {
            super(app);
            this.file = file;
        }
        
        @Override 
        protected Boolean doInBackground() throws Exception
        {
            boolean ok = false;
            boolean deleteOnError = false;
            BufferedOutputStream bos = null;
            try {
                bos = new BufferedOutputStream(new FileOutputStream(file));

                deleteOnError = true;
                bos.write(imageRawData, 0, imageRawData.length);
                ok = true;

            } finally {
                if(bos != null) {
                    try { bos.close(); bos = null; }
                    catch(Exception ex) { }
                }
                if( (!ok) && (deleteOnError) ) {
                    try { file.delete(); } 
                    catch(Exception ex) { }
                }
            }
            return new Boolean(ok);
        }

        @Override
        protected void cancelled() 
        {
            setMessage("Image save cancelled.");
        }                  

        @Override
        protected void succeeded(Boolean result)
        {
            try {
                if(result.booleanValue())
                    setMessage("Image saved to " + file.getName());
                else 
                    setMessage("Image not saved to " + file.getName());
            } catch(Exception ex) {
                failed(ex);
            }
        }

        @Override
        protected void interrupted(InterruptedException ex) 
        {
            setMessage("Image save interrupted: " + ex.getMessage());
            ex.printStackTrace();
        }

        @Override
        protected void failed(Throwable cause) 
        {
            setMessage("Error: " + cause.getMessage());
        }
    }

}
