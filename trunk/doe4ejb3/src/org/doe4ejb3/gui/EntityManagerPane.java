/*
 * EntityManagerPane.java
 *
 * Created on 14 October 2006, 13:44
 */

package org.doe4ejb3.gui;

import java.awt.Cursor;
import java.awt.FlowLayout;
import java.lang.annotation.Annotation;
import java.text.MessageFormat;
import java.util.HashMap;
import java.util.List;

import javax.swing.DefaultListModel;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JTable;
import javax.swing.DefaultListModel;
import javax.swing.ListSelectionModel;

import javax.persistence.Query;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;

import org.doe4ejb3.exception.ApplicationException;
import org.doe4ejb3.util.JPAUtils;
import org.doe4ejb3.util.EJBQLUtils;


/**
 *
 * @author  jordi
 */
public class EntityManagerPane extends javax.swing.JPanel {
    
    private Class entityClass = null;
    private QueryParametersEditorImpl queryParametersPanel = null;
    private ListSelectionModel listSelectionModel = null;
    private DefaultListModel   listModel = null;
    
    /**
     * Creates new form EntityManagerPane
     */
    public EntityManagerPane(Class entityClass) {
        initComponents();
        this.entityClass = entityClass;

        try {
            // post initialization:
            JComponentDataBinder outBinder[] = new JComponentDataBinder[1];
            JComponent entityListEditor = EditorFactory.getCollectionEditor(null, entityClass, true, 0, outBinder);
            listModel = (DefaultListModel)entityListEditor.getClientProperty("listModel");
            listSelectionModel = (ListSelectionModel)entityListEditor.getClientProperty("listSelectionModel");

            jComboBoxNamedQuery.removeAllItems();                                           
            jPanelQueryParams.setVisible(false);
            jPanelResults.setLayout(new java.awt.BorderLayout());
            jPanelResults.setBorder(javax.swing.BorderFactory.createEmptyBorder(5,0,0,0));
            jPanelResults.add("Center", entityListEditor);


            // load queries in combobox:
            jComboBoxNamedQuery.addItem("All");                                                                                                                             
            if(entityClass.getAnnotations() != null) {                                          
                for(Annotation annotation : entityClass.getAnnotations()) {                         
                    if(annotation instanceof NamedQuery) {                                              
                        NamedQuery namedQuery = (NamedQuery)annotation;                                 
                        String ejbql = namedQuery.query();                                              
                        if( (ejbql != null) && (ejbql.toUpperCase().startsWith("SELECT")) ) {                                                                                               
                            ListItem item = new ListItem(namedQuery, namedQuery.name());                                                                                                    
                            jComboBoxNamedQuery.addItem(item);
                        }
                    }
                    else if(annotation instanceof NamedQueries) {
                        NamedQueries namedQueries = (NamedQueries)annotation;
                        for(NamedQuery namedQuery : namedQueries.value()) {
                            String ejbql = namedQuery.query();                                              
                            if( (ejbql != null) && (ejbql.toUpperCase().startsWith("SELECT")) ) {                                                                                               
                                ListItem item = new ListItem(namedQuery, namedQuery.name());                                                                                                    
                                jComboBoxNamedQuery.addItem(item);
                            }
                        }
                    }
                }
            }

            
        } catch(Exception ex) {
            JOptionPane.showInternalMessageDialog(DomainObjectExplorer.getInstance().getDesktopPane(), "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);            
        }
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jPopupMenuContextual = new javax.swing.JPopupMenu();
        jMenuItemContextualNew = new javax.swing.JMenuItem();
        jMenuItemContextualEdit = new javax.swing.JMenuItem();
        jMenuItemContextualSeparator1 = new javax.swing.JSeparator();
        jMenuItemContextualDelete = new javax.swing.JMenuItem();
        jPanelEntidad = new javax.swing.JPanel();
        jLabelQuery = new javax.swing.JLabel();
        jComboBoxNamedQuery = new javax.swing.JComboBox();
        jPanelQueryParams = new javax.swing.JPanel();
        jButtonSearch = new javax.swing.JButton();
        jPanelResults = new javax.swing.JPanel();

        jMenuItemContextualNew.setMnemonic('n');
        jMenuItemContextualNew.setText("New");
        jMenuItemContextualNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemContextualNewActionPerformed(evt);
            }
        });

        jPopupMenuContextual.add(jMenuItemContextualNew);

        jMenuItemContextualEdit.setMnemonic('e');
        jMenuItemContextualEdit.setText("Edit");
        jMenuItemContextualEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemContextualEditActionPerformed(evt);
            }
        });

        jPopupMenuContextual.add(jMenuItemContextualEdit);

        jPopupMenuContextual.add(jMenuItemContextualSeparator1);

        jMenuItemContextualDelete.setMnemonic('d');
        jMenuItemContextualDelete.setText("Delete");
        jMenuItemContextualDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemContextualDeleteActionPerformed(evt);
            }
        });

        jPopupMenuContextual.add(jMenuItemContextualDelete);

        setLayout(new java.awt.BorderLayout());

        jPanelEntidad.setMinimumSize(new java.awt.Dimension(300, 200));
        jLabelQuery.setText("Query:");

        jComboBoxNamedQuery.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All" }));
        jComboBoxNamedQuery.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxNamedQueryItemStateChanged(evt);
            }
        });

        jPanelQueryParams.setBorder(javax.swing.BorderFactory.createTitledBorder("Parameters:"));

        jButtonSearch.setMnemonic('s');
        jButtonSearch.setText("Search");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanelResultsLayout = new org.jdesktop.layout.GroupLayout(jPanelResults);
        jPanelResults.setLayout(jPanelResultsLayout);
        jPanelResultsLayout.setHorizontalGroup(
            jPanelResultsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 492, Short.MAX_VALUE)
        );
        jPanelResultsLayout.setVerticalGroup(
            jPanelResultsLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 269, Short.MAX_VALUE)
        );

        org.jdesktop.layout.GroupLayout jPanelEntidadLayout = new org.jdesktop.layout.GroupLayout(jPanelEntidad);
        jPanelEntidad.setLayout(jPanelEntidadLayout);
        jPanelEntidadLayout.setHorizontalGroup(
            jPanelEntidadLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanelEntidadLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelEntidadLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanelResults, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanelQueryParams, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 492, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.LEADING, jPanelEntidadLayout.createSequentialGroup()
                        .add(jLabelQuery)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jComboBoxNamedQuery, 0, 360, Short.MAX_VALUE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jButtonSearch)))
                .addContainerGap())
        );
        jPanelEntidadLayout.setVerticalGroup(
            jPanelEntidadLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanelEntidadLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanelEntidadLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabelQuery)
                    .add(jButtonSearch)
                    .add(jComboBoxNamedQuery, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelQueryParams, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelResults, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        add(jPanelEntidad, java.awt.BorderLayout.CENTER);

    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemContextualDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemContextualDeleteActionPerformed
        try {
            DomainObjectExplorer.getInstance().showStatus("");
            
            if(listSelectionModel.getMinSelectionIndex() == -1) {
                throw new ApplicationException("There are not selected objects.");
            }

            int confirm = JOptionPane.showInternalConfirmDialog(DomainObjectExplorer.getInstance().getDesktopPane(), "Do you really want to delete selected objects?", "Confirm operation", JOptionPane.OK_CANCEL_OPTION);
            if(confirm == JOptionPane.OK_OPTION) 
            {
                Object invoker = ((javax.swing.JPopupMenu)((javax.swing.JMenuItem)evt.getSource()).getParent()).getInvoker();
                JComponent sourceControl = (JComponent)invoker;
                Class entityClass = (Class)sourceControl.getClientProperty("org.doe4ejb3.entityClass");                
                for(int index = listSelectionModel.getMaxSelectionIndex(); index >= listSelectionModel.getMinSelectionIndex(); index--) 
                {
                    if(listSelectionModel.isSelectedIndex(index)) {
                        Object entity = listModel.getElementAt(index);
                        JPAUtils.removeEntity(entity);
                        listModel.removeElementAt(index);
                    }
                }
            }
            

            DomainObjectExplorer.getInstance().showStatus("Selected items has been deleted.");
            
            
        } catch(ApplicationException ex) {
            
            JOptionPane.showInternalMessageDialog(DomainObjectExplorer.getInstance().getDesktopPane(), "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            
        } catch(Exception ex) {
            
            JOptionPane.showInternalMessageDialog(DomainObjectExplorer.getInstance().getDesktopPane(), "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }//GEN-LAST:event_jMenuItemContextualDeleteActionPerformed

    private void jMenuItemContextualEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemContextualEditActionPerformed
        try {
            DomainObjectExplorer.getInstance().showStatus("");
            
            Object invoker = ((javax.swing.JPopupMenu)((javax.swing.JMenuItem)evt.getSource()).getParent()).getInvoker();
            JComponent sourceControl = (JComponent)invoker;
            Class entityClass = (Class)sourceControl.getClientProperty("org.doe4ejb3.entityClass");
            
            int selectedIndexToEdit = listSelectionModel.getMinSelectionIndex();
            if(selectedIndexToEdit == -1) {
                throw new ApplicationException("No se ha seleccionado ningun valor.");                
            } else {
                Object entity = listModel.getElementAt(selectedIndexToEdit);
                DomainObjectExplorer.getInstance().openInternalFrameEntityEditor(entityClass, entity);
            }
            
        } catch(ApplicationException ex) {
            
            JOptionPane.showInternalMessageDialog(DomainObjectExplorer.getInstance().getDesktopPane(), "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            
        } catch(Exception ex) {
            
            JOptionPane.showInternalMessageDialog(DomainObjectExplorer.getInstance().getDesktopPane(), "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
            
        }
    }//GEN-LAST:event_jMenuItemContextualEditActionPerformed

    private void jMenuItemContextualNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemContextualNewActionPerformed
        try {
            DomainObjectExplorer.getInstance().showStatus("");
            
            Object invoker = ((javax.swing.JPopupMenu)((javax.swing.JMenuItem)evt.getSource()).getParent()).getInvoker();
            JComponent sourceControl = (JComponent)invoker;
            Class entityClass = (Class)sourceControl.getClientProperty("org.doe4ejb3.entityClass");
            DomainObjectExplorer.getInstance().openInternalFrameEntityEditor(entityClass, null);
            
        } catch(ApplicationException ex) {
            
            JOptionPane.showInternalMessageDialog(DomainObjectExplorer.getInstance().getDesktopPane(), "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            
        } catch(Exception ex) {
            
            JOptionPane.showInternalMessageDialog(DomainObjectExplorer.getInstance().getDesktopPane(), "Error: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
            
        }
    }//GEN-LAST:event_jMenuItemContextualNewActionPerformed

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        try {
            List entities = null;
            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            DomainObjectExplorer.getInstance().showStatus("Searching...");
            if(jComboBoxNamedQuery.getSelectedIndex() == 0) {   // ALL
                entities = JPAUtils.findAllEntities(entityClass);
            } else if(jComboBoxNamedQuery.getSelectedIndex() > 0) {
                ListItem listItem = (ListItem)jComboBoxNamedQuery.getSelectedItem();
                NamedQuery namedQuery = (NamedQuery)listItem.getValue();
                HashMap parameterValues = null;
                if(queryParametersPanel != null) parameterValues = queryParametersPanel.getParameterValues();
                entities = JPAUtils.executeNamedQuery(entityClass, namedQuery.name(), parameterValues);
            }
            
            listModel.clear();
            if(entities.size() > 0) {
                for(Object obj : entities) listModel.addElement(obj);
            }
            
            DomainObjectExplorer.getInstance().showStatus(MessageFormat.format("Search done: {0} entities found", entities.size()));
            
        } catch(Exception ex) {
            DomainObjectExplorer.getInstance().showStatus("Error: " + ex.getMessage());
            ex.printStackTrace();
        } finally {
            this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        }
    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jComboBoxNamedQueryItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxNamedQueryItemStateChanged
        String persistenceUnitName = JPAUtils.getPersistentUnitNameForEntity(entityClass);
        
        listModel.clear();
        if(jComboBoxNamedQuery.getSelectedIndex() <= 0) {
            jPanelQueryParams.removeAll();
            jPanelQueryParams.setVisible(false);
            jPanelResults.setBorder(javax.swing.BorderFactory.createEmptyBorder(5,0,0,0));
        } else  {
            DomainObjectExplorer.getInstance().showStatus("Searching parameter types...");
            
            ListItem listItem = (ListItem)jComboBoxNamedQuery.getSelectedItem();
            NamedQuery namedQuery = (NamedQuery)listItem.getValue();
            String ejbql = namedQuery.query();
            
            try {
                queryParametersPanel = null;
                jPanelQueryParams.removeAll();
            
                this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                HashMap ejbqlParameterTypes = EJBQLUtils.parseEJBQLParameterTypes(persistenceUnitName, ejbql);
                // TODO: create controls for query parameters (depending on its type)
                
                if(ejbqlParameterTypes.size() == 0) {
                    jPanelQueryParams.setVisible(false);
                    jPanelResults.setBorder(javax.swing.BorderFactory.createEmptyBorder(5,0,0,0));                    
                } else {
                    queryParametersPanel = new QueryParametersEditorImpl(ejbqlParameterTypes);
                    jPanelQueryParams.setLayout(new java.awt.BorderLayout());
                    jPanelQueryParams.add(queryParametersPanel, java.awt.BorderLayout.CENTER);
                    jPanelQueryParams.setVisible(true);
                    jPanelResults.setBorder(javax.swing.BorderFactory.createEmptyBorder(0,0,0,0));
                }
                
            } catch(Exception ex) {
                jPanelQueryParams.setLayout(new FlowLayout());
                jPanelQueryParams.add(new JLabel("Unknown parameter types"));
                jPanelQueryParams.setVisible(true);
                jPanelResults.setBorder(javax.swing.BorderFactory.createEmptyBorder(0,0,0,0));
            } finally {
                this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
            }
            
            DomainObjectExplorer.getInstance().showStatus("done.");            
        }

    }//GEN-LAST:event_jComboBoxNamedQueryItemStateChanged
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JComboBox jComboBoxNamedQuery;
    private javax.swing.JLabel jLabelQuery;
    private javax.swing.JMenuItem jMenuItemContextualDelete;
    private javax.swing.JMenuItem jMenuItemContextualEdit;
    private javax.swing.JMenuItem jMenuItemContextualNew;
    private javax.swing.JSeparator jMenuItemContextualSeparator1;
    private javax.swing.JPanel jPanelEntidad;
    private javax.swing.JPanel jPanelQueryParams;
    private javax.swing.JPanel jPanelResults;
    private javax.swing.JPopupMenu jPopupMenuContextual;
    // End of variables declaration//GEN-END:variables


}
