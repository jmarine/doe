//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.0-b17-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2006.08.28 at 08:29:25 PM CEST 
//


package org.doe4ejb3.jaxb.plugin;

import javax.xml.bind.JAXBElement;
import javax.xml.bind.annotation.XmlElementDecl;
import javax.xml.bind.annotation.XmlRegistry;
import javax.xml.bind.annotation.adapters.NormalizedStringAdapter;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;
import javax.xml.namespace.QName;
import org.doe4ejb3.jaxb.plugin.ActionsType.ActionOverride;
import org.doe4ejb3.jaxb.plugin.DependenciesType.Import;
import org.doe4ejb3.jaxb.plugin.EditorListenersType.EditorListener;
import org.doe4ejb3.jaxb.plugin.EditorsType.Editor;
import org.doe4ejb3.jaxb.plugin.HookHandlerHookType.HookHandler;
import org.doe4ejb3.jaxb.plugin.MenuHookType.ItemFactories;
import org.doe4ejb3.jaxb.plugin.WizardsType.Wizard;
import org.doe4ejb3.jaxb.plugin.WizardsType.WizardCategory;
import org.doe4ejb3.jaxb.plugin.XmlDocType.DocType;
import org.doe4ejb3.jaxb.plugin.XmlRootDocumentType.RootElement;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the org.doe4ejb3.jaxb.plugin package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {

    private final static QName _CustomHook_QNAME = new QName("http://jcp.org/jsr/198/extension-manifest", "custom-hook");
    private final static QName _IdeListenersTypeListenerClass_QNAME = new QName("http://jcp.org/jsr/198/extension-manifest", "listener-class");

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: org.doe4ejb3.jaxb.plugin
     * 
     */
    public ObjectFactory() {
    }

    /**
     * Create an instance of {@link ActionOverride }
     * 
     */
    public ActionOverride createActionsTypeActionOverride() {
        return new ActionOverride();
    }

    /**
     * Create an instance of {@link EditorListener }
     * 
     */
    public EditorListener createEditorListenersTypeEditorListener() {
        return new EditorListener();
    }

    /**
     * Create an instance of {@link IdentifiableType }
     * 
     */
    public IdentifiableType createIdentifiableType() {
        return new IdentifiableType();
    }

    /**
     * Create an instance of {@link PopupType }
     * 
     */
    public PopupType createPopupType() {
        return new PopupType();
    }

    /**
     * Create an instance of {@link FeatureHookType }
     * 
     */
    public FeatureHookType createFeatureHookType() {
        return new FeatureHookType();
    }

    /**
     * Create an instance of {@link SectionType }
     * 
     */
    public SectionType createSectionType() {
        return new SectionType();
    }

    /**
     * Create an instance of {@link I18NChar }
     * 
     */
    public I18NChar createI18NChar() {
        return new I18NChar();
    }

    /**
     * Create an instance of {@link IdeListenersType }
     * 
     */
    public IdeListenersType createIdeListenersType() {
        return new IdeListenersType();
    }

    /**
     * Create an instance of {@link DocType }
     * 
     */
    public DocType createXmlDocTypeDocType() {
        return new DocType();
    }

    /**
     * Create an instance of {@link SectionContainerType }
     * 
     */
    public SectionContainerType createSectionContainerType() {
        return new SectionContainerType();
    }

    /**
     * Create an instance of {@link HookHandler }
     * 
     */
    public HookHandler createHookHandlerHookTypeHookHandler() {
        return new HookHandler();
    }

    /**
     * Create an instance of {@link ActionsType }
     * 
     */
    public ActionsType createActionsType() {
        return new ActionsType();
    }

    /**
     * Create an instance of {@link I18NString }
     * 
     */
    public I18NString createI18NString() {
        return new I18NString();
    }

    /**
     * Create an instance of {@link ItemType }
     * 
     */
    public ItemType createItemType() {
        return new ItemType();
    }

    /**
     * Create an instance of {@link SuffixRecognizerType }
     * 
     */
    public SuffixRecognizerType createSuffixRecognizerType() {
        return new SuffixRecognizerType();
    }

    /**
     * Create an instance of {@link EditorType }
     * 
     */
    public EditorType createEditorType() {
        return new EditorType();
    }

    /**
     * Create an instance of {@link IdeListenerHookType }
     * 
     */
    public IdeListenerHookType createIdeListenerHookType() {
        return new IdeListenerHookType();
    }

    /**
     * Create an instance of {@link MenusType }
     * 
     */
    public MenusType createMenusType() {
        return new MenusType();
    }

    /**
     * Create an instance of {@link ItemFactories }
     * 
     */
    public ItemFactories createMenuHookTypeItemFactories() {
        return new ItemFactories();
    }

    /**
     * Create an instance of {@link OpenWithType }
     * 
     */
    public OpenWithType createOpenWithType() {
        return new OpenWithType();
    }

    /**
     * Create an instance of {@link XmlRootDocumentType }
     * 
     */
    public XmlRootDocumentType createXmlRootDocumentType() {
        return new XmlRootDocumentType();
    }

    /**
     * Create an instance of {@link DocumentHookType }
     * 
     */
    public DocumentHookType createDocumentHookType() {
        return new DocumentHookType();
    }

    /**
     * Create an instance of {@link WizardCategory }
     * 
     */
    public WizardCategory createWizardsTypeWizardCategory() {
        return new WizardCategory();
    }

    /**
     * Create an instance of {@link VfsHookType }
     * 
     */
    public VfsHookType createVfsHookType() {
        return new VfsHookType();
    }

    /**
     * Create an instance of {@link VfsHelperType }
     * 
     */
    public VfsHelperType createVfsHelperType() {
        return new VfsHelperType();
    }

    /**
     * Create an instance of {@link EditorsType }
     * 
     */
    public EditorsType createEditorsType() {
        return new EditorsType();
    }

    /**
     * Create an instance of {@link MenuType }
     * 
     */
    public MenuType createMenuType() {
        return new MenuType();
    }

    /**
     * Create an instance of {@link PlatformInfoType }
     * 
     */
    public PlatformInfoType createPlatformInfoType() {
        return new PlatformInfoType();
    }

    /**
     * Create an instance of {@link TypeType }
     * 
     */
    public TypeType createTypeType() {
        return new TypeType();
    }

    /**
     * Create an instance of {@link LogPageType }
     * 
     */
    public LogPageType createLogPageType() {
        return new LogPageType();
    }

    /**
     * Create an instance of {@link PropertyPageType }
     * 
     */
    public PropertyPageType createPropertyPageType() {
        return new PropertyPageType();
    }

    /**
     * Create an instance of {@link WizardType }
     * 
     */
    public WizardType createWizardType() {
        return new WizardType();
    }

    /**
     * Create an instance of {@link Wizard }
     * 
     */
    public Wizard createWizardsTypeWizard() {
        return new Wizard();
    }

    /**
     * Create an instance of {@link MappingsType }
     * 
     */
    public MappingsType createMappingsType() {
        return new MappingsType();
    }

    /**
     * Create an instance of {@link ActionType }
     * 
     */
    public ActionType createActionType() {
        return new ActionType();
    }

    /**
     * Create an instance of {@link Extension }
     * 
     */
    public Extension createExtension() {
        return new Extension();
    }

    /**
     * Create an instance of {@link RecognizersType }
     * 
     */
    public RecognizersType createRecognizersType() {
        return new RecognizersType();
    }

    /**
     * Create an instance of {@link EditorHookType }
     * 
     */
    public EditorHookType createEditorHookType() {
        return new EditorHookType();
    }

    /**
     * Create an instance of {@link MenuBarType }
     * 
     */
    public MenuBarType createMenuBarType() {
        return new MenuBarType();
    }

    /**
     * Create an instance of {@link MappingType }
     * 
     */
    public MappingType createMappingType() {
        return new MappingType();
    }

    /**
     * Create an instance of {@link CustomRecognizerType }
     * 
     */
    public CustomRecognizerType createCustomRecognizerType() {
        return new CustomRecognizerType();
    }

    /**
     * Create an instance of {@link Import }
     * 
     */
    public Import createDependenciesTypeImport() {
        return new Import();
    }

    /**
     * Create an instance of {@link DocTypeType }
     * 
     */
    public DocTypeType createDocTypeType() {
        return new DocTypeType();
    }

    /**
     * Create an instance of {@link WizardsType }
     * 
     */
    public WizardsType createWizardsType() {
        return new WizardsType();
    }

    /**
     * Create an instance of {@link RootElement }
     * 
     */
    public RootElement createXmlRootDocumentTypeRootElement() {
        return new RootElement();
    }

    /**
     * Create an instance of {@link CustomHookType }
     * 
     */
    public CustomHookType createCustomHookType() {
        return new CustomHookType();
    }

    /**
     * Create an instance of {@link PropertyPagesType }
     * 
     */
    public PropertyPagesType createPropertyPagesType() {
        return new PropertyPagesType();
    }

    /**
     * Create an instance of {@link LogPagesType }
     * 
     */
    public LogPagesType createLogPagesType() {
        return new LogPagesType();
    }

    /**
     * Create an instance of {@link HookHandlerHookType }
     * 
     */
    public HookHandlerHookType createHookHandlerHookType() {
        return new HookHandlerHookType();
    }

    /**
     * Create an instance of {@link ListenerType }
     * 
     */
    public ListenerType createListenerType() {
        return new ListenerType();
    }

    /**
     * Create an instance of {@link Editor }
     * 
     */
    public Editor createEditorsTypeEditor() {
        return new Editor();
    }

    /**
     * Create an instance of {@link HooksType }
     * 
     */
    public HooksType createHooksType() {
        return new HooksType();
    }

    /**
     * Create an instance of {@link ModelListenersType }
     * 
     */
    public ModelListenersType createModelListenersType() {
        return new ModelListenersType();
    }

    /**
     * Create an instance of {@link EditorListenersType }
     * 
     */
    public EditorListenersType createEditorListenersType() {
        return new EditorListenersType();
    }

    /**
     * Create an instance of {@link ClasspathsType }
     * 
     */
    public ClasspathsType createClasspathsType() {
        return new ClasspathsType();
    }

    /**
     * Create an instance of {@link ToolSectionType }
     * 
     */
    public ToolSectionType createToolSectionType() {
        return new ToolSectionType();
    }

    /**
     * Create an instance of {@link BuildSystemHookType }
     * 
     */
    public BuildSystemHookType createBuildSystemHookType() {
        return new BuildSystemHookType();
    }

    /**
     * Create an instance of {@link RadioGroupType }
     * 
     */
    public RadioGroupType createRadioGroupType() {
        return new RadioGroupType();
    }

    /**
     * Create an instance of {@link MenuHookType }
     * 
     */
    public MenuHookType createMenuHookType() {
        return new MenuHookType();
    }

    /**
     * Create an instance of {@link ToolbarsType }
     * 
     */
    public ToolbarsType createToolbarsType() {
        return new ToolbarsType();
    }

    /**
     * Create an instance of {@link DependenciesType }
     * 
     */
    public DependenciesType createDependenciesType() {
        return new DependenciesType();
    }

    /**
     * Create an instance of {@link LogHookType }
     * 
     */
    public LogHookType createLogHookType() {
        return new LogHookType();
    }

    /**
     * Create an instance of {@link XmlDocType }
     * 
     */
    public XmlDocType createXmlDocType() {
        return new XmlDocType();
    }

    /**
     * Create an instance of {@link PropertyHookType }
     * 
     */
    public PropertyHookType createPropertyHookType() {
        return new PropertyHookType();
    }

    /**
     * Create an instance of {@link WizardHookType }
     * 
     */
    public WizardHookType createWizardHookType() {
        return new WizardHookType();
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link CustomHookType }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://jcp.org/jsr/198/extension-manifest", name = "custom-hook")
    public JAXBElement<CustomHookType> createCustomHook(CustomHookType value) {
        return new JAXBElement<CustomHookType>(_CustomHook_QNAME, CustomHookType.class, null, value);
    }

    /**
     * Create an instance of {@link JAXBElement }{@code <}{@link String }{@code >}}
     * 
     */
    @XmlElementDecl(namespace = "http://jcp.org/jsr/198/extension-manifest", name = "listener-class", scope = IdeListenersType.class)
    @XmlJavaTypeAdapter(NormalizedStringAdapter.class)
    public JAXBElement<String> createIdeListenersTypeListenerClass(String value) {
        return new JAXBElement<String>(_IdeListenersTypeListenerClass_QNAME, String.class, IdeListenersType.class, value);
    }

}
