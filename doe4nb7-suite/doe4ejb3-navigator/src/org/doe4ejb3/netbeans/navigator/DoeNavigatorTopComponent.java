package org.doe4ejb3.netbeans.navigator;

import java.io.Serializable;
import java.util.Collection;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.Utilities;

import org.doe4ejb3.gui.CredentialsManagerPane;
import org.doe4ejb3.gui.DomainObjectExplorer;
import org.doe4ejb3.gui.EntityClassListCellRenderer;
import org.doe4ejb3.util.DOEUtils;



/**
 * Top component which displays something.
 */
final class DoeNavigatorTopComponent extends TopComponent {
    
    private static DoeNavigatorTopComponent instance;
    private static Object credentialsManagerWindow;
    
    /** path to the icon used by the component and its open action */
    //    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    
    private static final String PREFERRED_ID = "DoeNavigatorTopComponent";
    
    private DoeNavigatorTopComponent() {
        initComponents();
        DOEUtils.setWindowManager(new DoeWindowManagerForNetbeans(WindowManager.getDefault().getMainWindow()));
        setName(NbBundle.getMessage(DoeNavigatorTopComponent.class, "CTL_DoeNavigatorTopComponent"));
        setToolTipText(NbBundle.getMessage(DoeNavigatorTopComponent.class, "HINT_DoeNavigatorTopComponent"));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBoxPersistenceUnits = new javax.swing.JComboBox();
        jScrollPaneEntityClasses = new javax.swing.JScrollPane();
        jListEntityClasses = new javax.swing.JList();
        jPanelNavigatorToolbar = new javax.swing.JPanel();
        jButtonNew = new javax.swing.JButton();
        jButtonManager = new javax.swing.JButton();
        jButtonCredentials = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        jComboBoxPersistenceUnits.setModel(new javax.swing.DefaultComboBoxModel(new String[] { java.util.ResourceBundle.getBundle("org/doe4ejb3/netbeans/navigator/Bundle").getString("msg.selectPersistenceUnit"), "", "", "", "" }));
        jComboBoxPersistenceUnits.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                jComboBoxPersistenceUnitsPopupMenuWillBecomeVisible(evt);
            }
        });
        jComboBoxPersistenceUnits.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxPersistenceUnitsItemStateChanged(evt);
            }
        });
        add(jComboBoxPersistenceUnits, java.awt.BorderLayout.NORTH);

        jListEntityClasses.setCellRenderer(EntityClassListCellRenderer.getInstance());
        jListEntityClasses.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListEntityClassesMouseClicked(evt);
            }
        });
        jScrollPaneEntityClasses.setViewportView(jListEntityClasses);

        add(jScrollPaneEntityClasses, java.awt.BorderLayout.CENTER);

        jPanelNavigatorToolbar.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        org.openide.awt.Mnemonics.setLocalizedText(jButtonNew, org.doe4ejb3.util.I18n.getLiteral("createNewEntity.Action.text"));
        jButtonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewActionPerformed(evt);
            }
        });
        jPanelNavigatorToolbar.add(jButtonNew);

        org.openide.awt.Mnemonics.setLocalizedText(jButtonManager, org.doe4ejb3.util.I18n.getLiteral("manageEntityClass.Action.text"));
        jButtonManager.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonManagerActionPerformed(evt);
            }
        });
        jPanelNavigatorToolbar.add(jButtonManager);

        org.openide.awt.Mnemonics.setLocalizedText(jButtonCredentials, org.doe4ejb3.util.I18n.getLiteral("openConnectionManager.Action.text"));
        jButtonCredentials.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCredentialsActionPerformed(evt);
            }
        });
        jPanelNavigatorToolbar.add(jButtonCredentials);

        add(jPanelNavigatorToolbar, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

private void jListEntityClassesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListEntityClassesMouseClicked
    try {
        String puName = (String)jListEntityClasses.getClientProperty("org.doe4ejb3.persistenceUnit");
        Class  entityClass = (Class)jListEntityClasses.getSelectedValue();
        if( (evt.getClickCount() > 1) && (entityClass != null) ) {
            DOEUtils.openEntityManager(puName, entityClass);
        }
    } catch(Exception ex) {
        DOEUtils.getWindowManager().showStatus(DOEUtils.APPLICATION_WINDOW, "Error: " + ex.getMessage());
    }
}//GEN-LAST:event_jListEntityClassesMouseClicked

private void jComboBoxPersistenceUnitsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxPersistenceUnitsItemStateChanged
    if(jComboBoxPersistenceUnits.getSelectedIndex() <= 0) {
        jListEntityClasses.setModel(new DefaultListModel());  // clear
    } else {
        try {
            String persistenceUnit = (String)jComboBoxPersistenceUnits.getSelectedItem();
            Collection<Class> persistenceEntities = DomainObjectExplorer.getVisiblePersistentEntities(persistenceUnit);
            jListEntityClasses.setListData(persistenceEntities.toArray());
            jListEntityClasses.putClientProperty("org.doe4ejb3.persistenceUnit", persistenceUnit);
        } catch(Exception ex) {
            System.out.println("Error: " + ex.getMessage());
            ex.printStackTrace();
        }
    }

}//GEN-LAST:event_jComboBoxPersistenceUnitsItemStateChanged

private void jComboBoxPersistenceUnitsPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jComboBoxPersistenceUnitsPopupMenuWillBecomeVisible
    
    try {
        DefaultComboBoxModel comboBoxModel = (DefaultComboBoxModel)jComboBoxPersistenceUnits.getClientProperty("lazyModel");
        if(comboBoxModel == null) {
            comboBoxModel = (DefaultComboBoxModel)jComboBoxPersistenceUnits.getModel();
            jComboBoxPersistenceUnits.putClientProperty("lazyModel", comboBoxModel);

            Object selectedItem = comboBoxModel.getSelectedItem();
            comboBoxModel.removeAllElements();
            comboBoxModel.addElement(java.util.ResourceBundle.getBundle("org/doe4ejb3/netbeans/navigator/Bundle").getString("msg.selectPersistenceUnit"));
            
            java.util.Collection items = org.doe4ejb3.util.JPAUtils.getPersistenceUnits();
            for(Object puName : items) {
                comboBoxModel.addElement(puName);
            }

            comboBoxModel.setSelectedItem(selectedItem);   
         }

    } catch(Exception ex) {
        System.out.println("Error: " + ex.getMessage());
        ex.printStackTrace();
    }
    
}//GEN-LAST:event_jComboBoxPersistenceUnitsPopupMenuWillBecomeVisible

private void jButtonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewActionPerformed
    try {
        String puName = (String)jListEntityClasses.getClientProperty("org.doe4ejb3.persistenceUnit");
        Class  entityClass = (Class)jListEntityClasses.getSelectedValue();
        if(entityClass != null) {
            DOEUtils.openEntityEditor(puName, entityClass, null);
        }
    } catch(Exception ex) {
        System.out.println("Error: " + ex.getMessage());
        ex.printStackTrace();
    }        
}//GEN-LAST:event_jButtonNewActionPerformed

private void jButtonManagerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonManagerActionPerformed
    try {
        String puName = (String)jListEntityClasses.getClientProperty("org.doe4ejb3.persistenceUnit");
        Class  entityClass = (Class)jListEntityClasses.getSelectedValue();
        if(entityClass != null) {
            DOEUtils.openEntityManager(puName, entityClass);
        }
    } catch(Exception ex) {
        System.out.println("Error: " + ex.getMessage());
        ex.printStackTrace();
    }        
}//GEN-LAST:event_jButtonManagerActionPerformed

private void jButtonCredentialsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCredentialsActionPerformed
    try {
        if(credentialsManagerWindow == null) {
            credentialsManagerWindow = DOEUtils.getWindowManager().createWindow("connectionManager", org.doe4ejb3.util.I18n.getLiteral(CredentialsManagerPane.class, "credentialsManagerDialog.title"), null, new CredentialsManagerPane());
        }
        DOEUtils.getWindowManager().showWindow(credentialsManagerWindow, true);
    } catch(Exception ex) {
        System.out.println("Error: " + ex.getMessage());
        ex.printStackTrace();        
    }
}//GEN-LAST:event_jButtonCredentialsActionPerformed
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCredentials;
    private javax.swing.JButton jButtonManager;
    private javax.swing.JButton jButtonNew;
    private javax.swing.JComboBox jComboBoxPersistenceUnits;
    private javax.swing.JList jListEntityClasses;
    private javax.swing.JPanel jPanelNavigatorToolbar;
    private javax.swing.JScrollPane jScrollPaneEntityClasses;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized DoeNavigatorTopComponent getDefault() {
        if (instance == null) {
            instance = new DoeNavigatorTopComponent();
        }
        return instance;
    }
    
    /**
     * Obtain the DoeNavigatorTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized DoeNavigatorTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(DoeNavigatorTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof DoeNavigatorTopComponent) {
            return (DoeNavigatorTopComponent)win;
        }
        Logger.getLogger(DoeNavigatorTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }
    
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }
    
    public void componentOpened() {
        // TODO add custom code on component opening
    }
    
    public void componentClosed() {
        // TODO add custom code on component closing
    }
    
    /** replaces this in object stream */
    public Object writeReplace() {
        return new ResolvableHelper();
    }
    
    protected String preferredID() {
        return PREFERRED_ID;
    }
    
    final static class ResolvableHelper implements Serializable {
        private static final long serialVersionUID = 1L;
        public Object readResolve() {
            return DoeNavigatorTopComponent.getDefault();
        }
    }

    
    
    
}
